'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var fs = require('fs');
var path = require('path');

Object.assign.apply(Object, [exports, fs].concat(_toConsumableArray(['access', 'appendFile', 'chmod', 'chown', 'close', 'exists', 'fchmod', 'fchown', 'fdatasync', 'fstat', 'fsync', 'ftruncate', 'futimes', 'lchmod', 'lchown', 'link', 'lstat', 'mkdtemp', 'open', 'read', 'readdir', 'readFile', 'readlink', 'realpath', 'rename', 'rmdir', 'stat', 'symlink', 'truncate', 'unlink', 'utimes', 'write', 'write'].map(function (name) {
	return _defineProperty({}, name, function (pathname) {
		for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			args[_key - 1] = arguments[_key];
		}

		return new Promise(function (resolve, reject) {
			return fs[name].apply(fs, [pathname].concat(args, [function (err) {
				for (var _len2 = arguments.length, res = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
					res[_key2 - 1] = arguments[_key2];
				}

				if (err) {
					reject(err);
				} else {
					resolve.apply(undefined, res);
				}
			}]));
		});
	});
})), _toConsumableArray(['mkdir', 'writeFile'].map(function (key) {
	return _defineProperty({}, key, function (pathname) {
		for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
			args[_key3 - 1] = arguments[_key3];
		}

		return new Promise(function (resolve, reject) {
			// execute the native method
			fs[key].apply(fs, [pathname].concat(args, [function (err) {
				// if there is no parent directory
				if (err && err.code === 'ENOENT') {
					// promise to make the parent directory
					exports.mkdir(path.dirname(pathname)).then(
					// and then try again
					function () {
						var _exports;

						return (_exports = exports)[key].apply(_exports, [pathname].concat(args));
					}).then(resolve);
				} else if (err && err.code !== 'EEXIST') {
					// otherwise, reject any error not about an existing directory
					reject(err);
				} else {
					// otherwise, resolve
					resolve();
				}
			}]));
		});
	});
})), _toConsumableArray(['mkdirSync', 'writeFileSync'].map(function (key) {
	return _defineProperty({}, key, function (pathname) {
		for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
			args[_key4 - 1] = arguments[_key4];
		}

		try {
			// try to execute the native method
			fs[key].apply(fs, [pathname].concat(args));
		} catch (err) {
			// if there is no parent directory
			if (err && err.code === 'ENOENT') {
				var _exports2;

				// make the parent directory
				exports.mkdirSync(path.dirname(pathname));

				// and then try again
				(_exports2 = exports)[key].apply(_exports2, [pathname].concat(args));
			} else if (err && err.code !== 'EEXIST') {
				// otherwise, throw any error not about an existing directory
				throw err;
			}
		}
	});
})), [

// copydir
{
	copydir: function copydir(source, target) {
		return exports.mkdir(target).then(
		// make the target directory, then promise to read the source directory
		function () {
			return exports.readdir(source);
		}).then(
		// promise to copy the contents of the source directory
		function (children) {
			return Promise.all(children.map(function (child) {
				var sourceChild = path.resolve(source, child);
				var targetChild = path.resolve(target, child);

				// promise the appropriate copy of the child
				return exports.lstat(sourceChild).then(function (lstat) {
					return lstat.isDirectory() ? exports.copydir(sourceChild, targetChild) : exports.copyFile(sourceChild, targetChild);
				});
			})).then(function () {
				return Promise.resolve();
			});
		});
	}
},

// copydirSync
{
	copydirSync: function copydirSync(source, target) {
		// make the target directory
		exports.mkdirSync(target);

		// read the source directory
		var children = exports.readdirSync(source);

		// copy the contents of the source directory
		children.forEach(function (child) {
			var sourceChild = path.resolve(source, child);
			var targetChild = path.resolve(target, child);

			var lstat = exports.lstatSync(sourceChild);

			// execute the appropriate copy of the child
			if (lstat.isDirectory()) {
				exports.copydirSync(sourceChild, targetChild);
			} else {
				exports.copyFileSync(sourceChild, targetChild);
			}
		});
	}
},

// copyFile
{
	copyFile: function copyFile(source, target) {
		return exports.touchFile(target).then(
		// make the target directory, then promise to copy the file
		function () {
			return new Promise(function (resolve, reject) {
				// create streams
				var readStream = exports.createReadStream(path.resolve(source));
				var writeStream = exports.createWriteStream(path.resolve(target));

				// reject on read error
				readStream.on('error', prereject);

				// reject on write error
				writeStream.on('error', prereject);

				// resolve on finish
				writeStream.on('finish', resolve);

				// copy stream
				readStream.pipe(writeStream);

				function prereject(err) {
					// destroy streams
					readStream.destroy();
					writeStream.end();

					// reject with error
					reject(err);
				}
			});
		});
	}
},

// copyFileSync
{
	copyFileSync: function copyFileSync(source, target) {
		// make the target directory
		exports.mkdirSync(path.dirname(target));

		// buffer
		var bufferLength = 64 * 1024;
		var buffer = new Buffer(bufferLength);

		// position
		var bytesRead = 1;
		var position = 0;

		// open the reader and writer
		var reader = fs.openSync(source, 'r');
		var writer = fs.openSync(target, 'w');

		// copy the file
		while (bytesRead > 0) {
			bytesRead = fs.readSync(reader, buffer, 0, bufferLength, position);

			fs.writeSync(writer, buffer, 0, bytesRead);

			position += bytesRead;
		}

		// close the reader and writer
		fs.closeSync(reader);
		fs.closeSync(writer);
	}
},

// readJson
{
	readJson: function readJson(filename) {
		return exports.readFile(filename, 'utf8').then(JSON.parse);
	}
},

// readJsonSync
{
	readJsonSync: function readJsonSync(filename) {
		return JSON.parse(exports.readFileSync(filename, 'utf8'));
	}
},

// rmdir
{
	rmdir: function rmdir(dirname) {
		return new Promise(function (resolve, reject) {
			// remove the directory
			fs.rmdir(dirname, function (err) {
				// if there is an error about the directory not being empty
				if (err && err.code === 'ENOTEMPTY') {
					// resolve to read the directory
					resolve(exports.readdir(dirname).then(
					// promise to remove each child of the directory
					function (children) {
						return Promise.all(children.map(function (child) {
							var resolvedChild = path.resolve(dirname, child);

							// promise to remove of the child
							return exports.lstat(resolvedChild).then(function (lstat) {
								return lstat.isDirectory() ? exports.rmdir(resolvedChild) : exports.unlink(resolvedChild);
							});
						}));
					}).then(
					// and then try again
					function () {
						return exports.rmdir(dirname);
					}));
				} else if (err) {
					// otherwise, reject any error
					reject(err);
				} else {
					// otherwise, resolve
					resolve();
				}
			});
		});
	}
},

// rmdirSync
{
	rmdirSync: function rmdirSync(dirname) {
		try {
			// try to remove the directory
			fs.rmdirSync(dirname);
		} catch (err) {
			// if there is an error about the directory not being empty
			if (err && err.code === 'ENOTEMPTY') {
				var children = exports.readdirSync(dirname);

				// remove each child of the directory
				children.forEach(function (child) {
					var resolvedChild = path.resolve(dirname, child);

					var lstat = exports.lstatSync(resolvedChild);

					// remove the child
					if (lstat.isDirectory()) {
						exports.rmdirSync(resolvedChild);
					} else {
						exports.unlinkSync(resolvedChild);
					}
				});

				// and then try again
				exports.rmdirSync(dirname);
			} else {
				// otherwise, throw any error
				throw err;
			}
		}
	}
},

// touchFile
{
	touchFile: function touchFile(filename) {
		return new Promise(function (resolve, reject) {
			// touch the file
			fs.open(filename, 'wx', function (err) {
				// if there is no parent directory
				if (err && err.code === 'ENOENT') {
					// promise to make the parent directory
					exports.mkdir(path.dirname(filename)).then(
					// and then try again
					function () {
						return exports.touchFile(filename);
					}).then(resolve);
				} else if (err && err.code !== 'EEXIST') {
					// otherwise, reject any error not about the directory already existing
					reject(err);
				} else {
					// otherwise, resolve
					resolve();
				}
			});
		});
	}
},

// touchFileSync
{
	touchFileSync: function touchFileSync(filename) {
		try {
			// try to touch the file
			fs.openSync(filename, 'wx');
		} catch (err) {
			// if there is no parent directory
			if (err && err.code === 'ENOENT') {
				// make the parent directory
				exports.mkdirSync(path.dirname(filename));

				// and then try again
				exports.touchFileSync(filename);
			} else if (err && err.code !== 'EEXIST') {
				// otherwise, throw any error not about the directory already existing
				throw err;
			}
		}
	}
}]));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,